install.packages(c("cluster", "codetools", "foreign", "lattice", "Matrix", "mgcv", "survival"))
install.packages("mvoutlier")
library(mvoutlier)
library("Rserve", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("Rserve")
library(mvoutlier)
library("Rserve", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("reshape", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
ist.of.packages <- c("dplyr", "plyr", "data.table", "MissForest", "MissMDA",
"Outliers", "EVIR", "Features", "RRF", "FactorMiner", "CCP",
"ggplot2", "googkleVis", "Rcharts", "car", "randomforest",
"Rminer", "CoreLearn", "caret", "BigRF", "CBA",
"RankCluster", "forecat", "LTSA", "survival", "Basta",
"LSMean", "Comparison", "RegTest", "ACD", "BinomTools",
"DAIM", "ClustEval", "SigClust", "PROC", "TimeROC", "Rcpp",
"parallel", "xml", "httr", "rjson", "jasonlite", "shiny",
"Rmarkdown", "tm", "OpenNLP", "sqldf", "RODBC", "rmonogodb")
new.packages <- list.of.packages[!(list.of.packages
%in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages,function(x){library(x,character.only=TRUE)})
Listofpackages <- c("dplyr", "plyr", "data.table", "MissForest", "MissMDA","Outliers", "EVIR", "Features", "RRF", "FactorMiner", "CCP",
"ggplot2", "googkleVis", "Rcharts", "car", "randomforest", "Rminer", "CoreLearn", "caret", "BigRF", "CBA", "RankCluster", "forecat", "LTSA", "survival", "Basta", "LSMean", "Comparison", "RegTest", "ACD", "BinomTools", "DAIM", "ClustEval", "SigClust", "PROC", "TimeROC", "Rcpp", "parallel", "xml", "httr", "rjson", "jasonlite", "shiny","Rmarkdown", "tm", "OpenNLP", "sqldf", "RODBC", "rmonogodb")
newpackages <- list.of.packages[!(listofpackages%in% installed.packages()[,"Package"])]
if(length(newpackages)) install.packages(newpackages)
lapply(list.of.packages,function(x){library(x,character.only=TRUE)})
Listofpackages <- c("dplyr", "plyr", "data.table", "MissForest", "MissMDA","Outliers", "EVIR", "Features", "RRF", "FactorMiner", "CCP",
"ggplot2", "googkleVis", "Rcharts", "car", "randomforest", "Rminer", "CoreLearn", "caret", "BigRF", "CBA", "RankCluster", "forecat", "LTSA", "survival", "Basta", "LSMean", "Comparison", "RegTest", "ACD", "BinomTools", "DAIM", "ClustEval", "SigClust", "PROC", "TimeROC", "Rcpp", "parallel", "xml", "httr", "rjson", "jasonlite", "shiny","Rmarkdown", "tm", "OpenNLP", "sqldf", "RODBC", "rmonogodb")
newpackages <- listofpackages[!(listofpackages%in% installed.packages()[,"Package"])]
if(length(newpackages)) install.packages(newpackages)
lapply(list.of.packages,function(x){library(x,character.only=TRUE)})
Listofpackages <- c("dplyr", "plyr", "data.table", "MissForest", "MissMDA","Outliers", "EVIR", "Features", "RRF", "FactorMiner", "CCP",
"ggplot2", "googkleVis", "Rcharts", "car", "randomforest", "Rminer", "CoreLearn", "caret", "BigRF", "CBA", "RankCluster", "forecat", "LTSA", "survival", "Basta", "LSMean", "Comparison", "RegTest", "ACD", "BinomTools", "DAIM", "ClustEval", "SigClust", "PROC", "TimeROC", "Rcpp", "parallel", "xml", "httr", "rjson", "jasonlite", "shiny","Rmarkdown", "tm", "OpenNLP", "sqldf", "RODBC", "rmonogodb")
newpackages <- listofpackages[!(listofpackages%in% installed.packages()[,"Package"])]
if(length(newpackages)) install.packages(newpackages)
lapply(listofpackages,function(x){library(x,character.only=TRUE)})
listofpackages <- c("dplyr", "plyr", "data.table", "MissForest", "MissMDA","Outliers", "EVIR", "Features", "RRF", "FactorMiner", "CCP",
"ggplot2", "googkleVis", "Rcharts", "car", "randomforest", "Rminer", "CoreLearn", "caret", "BigRF", "CBA", "RankCluster", "forecat", "LTSA", "survival", "Basta", "LSMean", "Comparison", "RegTest", "ACD", "BinomTools", "DAIM", "ClustEval", "SigClust", "PROC", "TimeROC", "Rcpp", "parallel", "xml", "httr", "rjson", "jasonlite", "shiny","Rmarkdown", "tm", "OpenNLP", "sqldf", "RODBC", "rmonogodb")
newpackages <- listofpackages[!(listofpackages%in% installed.packages()[,"Package"])]
if(length(newpackages)) install.packages(newpackages)
swirl
swirl()
library(swirl)
swirl()
class(cls_vect)
sum(flags$orange)
flags_colors <- Flags[,11:17]
flags_colors <- flags[,11:17]
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape <- sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags,unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags,unique, character(1))
OK()
ok()
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flasgs$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
info(sample())
info(sample
)
info(sample)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, prob = c(0.3, 0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
lapply(flips$1, sum)
sum(flips$1)
sum(flips = 1)
sum(flips)
?rbinom
rbinom(1, size = 100. prob= 0.7)
rbinom(1, size = 100 prob= 0.7)
rbinom(1, size = 100, prob= 0.7)
flips1 <- rbinom(100, size = 1, prob = 0.7)
flips1 <- rbinom(1, n = 2, 100, size = 1, prob = 0.7)
flips1 <- rbinom(n = 2, 100, size = 1, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(100, mean = 100, sd = 25)
rnorm(10, mean = 100, sd = 25)
rpois(5, lambda = 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
cm
hist(cm)
data(cars)
help(cars)
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars,  main = "My Plot")
plot(cars,  main = "My Plot", sub = "My Plot Subtitle")
plot(cars sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
?boxplot
bloxplot(mtcars, formula = mpg ~ cyl)
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(Rserve)
Rserve()
Rserve(args="--no-save")
library(datasets)
data("iris")
?iris
head(iris)
plot(iris)
boxplot(iris)
mean(sepal.Length$Species)
mean(Sepal.Length$Species)
lapply(Sepal.Length$Species, mean)
mean(Sepal.Length$Virginica)
lapply(Sepal.Length)
lapply(Sepal.Length, mean)
lapply("Sepal.Length", mean)
mean("Sepal.Length"$Virginica)
lapply("Sepal.Length"$Virginica, mean)
library(swirl)
swirl
swirl()
sapplu(flags,unique)
sapply(flags,unique)
pause
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, unique, character(1))
ok()
vapply(flags, class, character(1))
?tapply
table*(flags$landmass)
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags@red, summmary)
tapply(flags$population, flags@red, summary)
tapply(flags$population, flags@red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[,1:4], 2, mean)
apply(iris[,1:4], 1, mean)
apply(iris, 2, mean)
apply(iris, 1, mean)
rowMeans(iris[,1:4])
library(datasets)
data("mtcars")
head(mtcars)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
mpgSavings <- with(mtcars, tapply(mpg, cyl, mean = 8))
mpgSavings
mean(mtcars$mpg, mtcars$cyl = 8)
mean(mtcars$mpg, (mtcars$cyl = 80)
)
mean(mtcars$mpg, (mtcars$cyl = 8))
debug(ls)
tapply(iris$Sepal.Length, iris$Species, mean)
exit
quit
quit
debug
apply(iris, 1, mean)
apply(iris, 1, mean)
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
n
n
s
f
c
c
Q
quit
if (!missing(name)) {
pos <- tryCatch(name, error = function(e) e)
if (inherits(pos, "error")) {
name <- substitute(name)
if (!is.character(name))
name <- deparse(name)
warning(gettextf("%s converted to character string",
sQuote(name)), domain = NA)
pos <- name
}
}
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
